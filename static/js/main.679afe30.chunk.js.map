{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","event","setState","selectedLanguage","target","value","console","log","fetchData","state","languages","isLoading","helloWorldText","this","fetch","then","response","json","data","language","Card","style","display","justifyContent","alignItems","flexDirection","FormControl","width","InputLabel","id","Select","labelId","onChange","map","MenuItem","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wUAqEeA,E,kDA5DX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAgBVC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAACC,iBAAkBF,EAAMG,OAAOC,QAC9CC,QAAQC,IAAIN,EAAMG,OAAOC,OACzB,EAAKG,UAAUP,EAAMG,OAAOC,QAlB5B,EAAKI,MAAQ,CACTC,UAAW,GACXP,iBAAkB,GAClBQ,WAAW,EACXC,eAAgB,eANL,E,gEAUE,IAAD,OAChBC,KAAKX,SAAS,CAACS,WAAW,IAC1BG,MAAM,2FACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKhB,SAAS,CAACQ,UAAWQ,EAAMP,WAAW,S,gCASvDQ,GAAW,IAAD,OAChBL,MAAM,0GAAqGK,IACtGJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKhB,SAAS,CAACU,eAAgBM,EAAMP,WAAW,S,+BAIlE,OACI,6BAAK,kBAACS,EAAA,EAAD,CAAMC,MAAO,CACdC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,WAJd,kBAOD,6BACA,6BACA,kBAACC,EAAA,EAAD,CAAaL,MAAO,CAACM,MAAO,MACxB,kBAACC,EAAA,EAAD,CAAYC,GAAG,4BAAf,YACA,kBAACC,EAAA,EAAD,CAAQT,MAAO,CAACM,MAAO,KACfI,QAAQ,eACRF,GAAG,qBACHxB,MAAOQ,KAAKJ,MAAMN,iBAClB6B,SAAUnB,KAAKb,cAElBa,KAAKJ,MAAMC,UAAUuB,KAAI,SAAC5B,GAAD,OACtB,kBAAC6B,EAAA,EAAD,CAAU7B,MAAOA,GAAQA,QAIrC,6BACCQ,KAAKJ,MAAMG,qB,GAvDVuB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.679afe30.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Card from \"@material-ui/core/Card\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            languages: [],\n            selectedLanguage: '',\n            isLoading: false,\n            helloWorldText: 'Hello World'\n        };\n    }\n\n    componentDidMount() {\n        this.setState({isLoading: true});\n        fetch('https://cors-anywhere.herokuapp.com/' + 'https://thawing-ocean-61652.herokuapp.com/languages')\n            .then(response => response.json())\n            .then(data => this.setState({languages: data, isLoading: false}));\n    }\n\n    handleChange = (event) => {\n        this.setState({selectedLanguage: event.target.value});\n        console.log(event.target.value);\n        this.fetchData(event.target.value);\n    };\n\n    fetchData(language) {\n        fetch('https://cors-anywhere.herokuapp.com/' + `https://thawing-ocean-61652.herokuapp.com/hello?language=${language}`)\n            .then(response => response.json())\n            .then(data => this.setState({helloWorldText: data, isLoading: false}));\n    }\n\n    render() {\n        return (\n            <div><Card style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                flexDirection: 'column'\n            }}>\n                Hello World App\n                <br/>\n                <br/>\n                <FormControl style={{width: 100}}>\n                    <InputLabel id=\"demo-simple-select-label\">Language</InputLabel>\n                    <Select style={{width: 100}}\n                            labelId=\"select-label\"\n                            id=\"demo-simple-select\"\n                            value={this.state.selectedLanguage}\n                            onChange={this.handleChange}\n                    >\n                        {this.state.languages.map((value) => (\n                            <MenuItem value={value}>{value}</MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n                <br/>\n                {this.state.helloWorldText}\n            </Card>\n            </div>)\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}